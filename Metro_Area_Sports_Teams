# Using a file of sports team win/loss records over a number of years, and another file listing metropolitan areas and their populations,
# calculate the win/loss ratio's correlation with the population of the city it is in for the NFL using 2018 data.
# If multiple teams in same metro area, we average their records.

import pandas as pd
import numpy as np
import scipy.stats as stats
import re

def nfl_correlation(): 

    # Read NFL File: Only need 4 columns : team, W, L, year
    nfl_df=pd.read_csv('assets/nfl.csv', usecols=[1,11,13,14])

    # Read Wiki File: Only need 2 columns : metro area, pop
    cities=pd.read_html('assets/wikipedia_data.html')[1]
    cities=cities.iloc[:-1,[0,3]]
    
    #------ NFL TEAMS FILE CHANGES ----------------

    # Drop rows not from Year 2018
    nfl_df.drop(nfl_df[nfl_df['year'] != 2018].index, inplace=True)  
      
    # Drop rows for Divisions
    nfl_df = nfl_df[~nfl_df["W"].str.contains("FC")]

    # Team name - Drop last word to leave just city name
    nfl_df['team'] = nfl_df.team.str.replace('\s+\S+$', '')
      
    # Change team geographic names to match Wiki metro areas
    nfl_df['team'] = nfl_df.team.str.replace('New England', 'Boston')
    nfl_df['team'] = nfl_df.team.str.replace('Miami', 'Miami–Fort Lauderdale')
    nfl_df['team'] = nfl_df.team.str.replace('New York', 'New York City')
    nfl_df['team'] = nfl_df.team.str.replace('Tennessee', 'Nashville')
    nfl_df['team'] = nfl_df.team.str.replace('San Francisco', 'San Francisco Bay Area')
    nfl_df['team'] = nfl_df.team.str.replace('Oakland', 'San Francisco Bay Area')
    nfl_df['team'] = nfl_df.team.str.replace('Dallas', 'Dallas–Fort Worth')
    nfl_df['team'] = nfl_df.team.str.replace('Washington', 'Washington, D.C.')    
    nfl_df['team'] = nfl_df.team.str.replace('Minnesota', 'Minneapolis–Saint Paul')
    nfl_df['team'] = nfl_df.team.str.replace('Carolina', 'Charlotte')
    nfl_df['team'] = nfl_df.team.str.replace('Tampa Bay', 'Tampa Bay Area')
    nfl_df['team'] = nfl_df.team.str.replace('Arizona', 'Phoenix')
    
    # Rename team column and make it the index
    nfl_df=nfl_df.rename(columns={"team": "Metropolitan area"})
    nfl_df=nfl_df.set_index('Metropolitan area')

    # Collapse duplicate metro area rows and get average Wins and Losses
    nfl_df = nfl_df.drop(columns=['year'])
    nfl_df = nfl_df.astype({'W': 'int32', 'L': 'int32'})
    nfl_df = nfl_df.groupby('Metropolitan area').mean()

    #return nfl_df

    #------ WIKI FILE CHANGES ----------------
    
    # Rename population column and make Metro the index
    cities=cities.set_index('Metropolitan area')
    cities=cities.rename(columns={"Population (2016 est.)[8]": "Pop"})
    cities=cities.astype({'Pop': 'int32'})

    #return cities

    #------ MERGE DATAFRAMES AND CALCULATE RESULTS  ----------------

    df_merged=pd.merge(nfl_df, cities, how='inner', on='Metropolitan area')
    #return df_merged

    population_by_region = df_merged['Pop'] # pass in metropolitan area population from cities
    win_loss_by_region = df_merged['W'] / (df_merged['W'] + df_merged['L']) # pass in win/loss ratio from nfl_df in the same order as cities["Metropolitan area"]

    # Convert Series to numpy arrays
    population_by_region = population_by_region.to_numpy()
    win_loss_by_region = win_loss_by_region.to_numpy()
    
    #return population_by_region
    #return win_loss_by_region
    #return df_merged

    assert len(population_by_region) == len(win_loss_by_region), "Q4: Your lists must be the same length"
    assert len(population_by_region) == 29, "Q4: There should be 29 teams being analysed for NFL"

    return stats.pearsonr(population_by_region, win_loss_by_region)[0]

#---- INVOKE
nfl_correlation()

#####################################################

# Exporing the hypothesis that given that an area has two sports teams in different sports, those teams will perform the same within their respective sports. 
# Using paired t-tests (so use ttest_rel) between all pairs of sports.  

##################################

import pandas as pd
import numpy as np
import scipy.stats as stats
import re
    
def get_mlb_df():

    mlb_df=pd.read_csv('assets/mlb.csv', usecols=[0,1,2,5])
    mlb_df.drop(mlb_df[mlb_df['year'] != 2018].index, inplace=True)  
    mlb_df['team'] = mlb_df.team.str.replace('\s+\S+$', '')      
    mlb_df['team'] = mlb_df.team.str.replace('Boston Red', 'Boston')
    mlb_df['team'] = mlb_df.team.str.replace('New York', 'New York City')
    mlb_df['team'] = mlb_df.team.str.replace('Tampa Bay', 'Tampa Bay Area')
    mlb_df['team'] = mlb_df.team.str.replace('Toronto Blue', 'Toronto')
    mlb_df['team'] = mlb_df.team.str.replace('Minnesota', 'Minneapolis–Saint Paul')
    mlb_df['team'] = mlb_df.team.str.replace('Chicago White', 'Chicago')
    mlb_df['team'] = mlb_df.team.str.replace('Texas', 'Dallas–Fort Worth')
    mlb_df['team'] = mlb_df.team.str.replace('Washington', 'Washington, D.C.')    
    mlb_df['team'] = mlb_df.team.str.replace('Miami', 'Miami–Fort Lauderdale')
    mlb_df['team'] = mlb_df.team.str.replace('Colorado', 'Denver')
    mlb_df['team'] = mlb_df.team.str.replace('Arizona', 'Phoenix')
    mlb_df['team'] = mlb_df.team.str.replace('San Francisco', 'San Francisco Bay Area')
    mlb_df['team'] = mlb_df.team.str.replace('Oakland', 'San Francisco Bay Area')
    mlb_df=mlb_df.rename(columns={"team": "Metropolitan area"})
    mlb_df=mlb_df.set_index('Metropolitan area')
    mlb_df = mlb_df.drop(columns=['year'])
    mlb_df = mlb_df.astype({'W': 'int32', 'L': 'int32'})
    mlb_df = mlb_df.groupby('Metropolitan area').mean()
    win_loss_by_region = mlb_df['W'] / (mlb_df['W'] + mlb_df['L'])
    win_loss_by_region = win_loss_by_region.to_numpy()
    mlb_df['WLR_MLB'] = win_loss_by_region
    return mlb_df

def get_nhl_df():            
    nhl_df=pd.read_csv('assets/nhl.csv', usecols=[0,2,3,13])
    nhl_df.drop(nhl_df[nhl_df['year'] != 2018].index, inplace=True)  
    nhl_df = nhl_df[~nhl_df["W"].str.contains("Division")]
    nhl_df['team'] = nhl_df.team.str.replace('\s+\S+$', '')
    nhl_df['team'] = nhl_df.team.str.replace(' Maple| Red| Blue| Golden', '')
    nhl_df['team'] = nhl_df.team.str.replace('Jersey', 'York')
    nhl_df['team'] = nhl_df.team.str.replace('Tampa Bay', 'Tampa Bay Area')
    nhl_df['team'] = nhl_df.team.str.replace('Florida', 'Miami–Fort Lauderdale')
    nhl_df['team'] = nhl_df.team.str.replace('Washington', 'Washington, D.C.')
    nhl_df['team'] = nhl_df.team.str.replace('New York', 'New York City')
    nhl_df['team'] = nhl_df.team.str.replace('Carolina', 'Raleigh')
    nhl_df['team'] = nhl_df.team.str.replace('Minnesota', 'Minneapolis–Saint Paul')
    nhl_df['team'] = nhl_df.team.str.replace('Colorado', 'Denver')
    nhl_df['team'] = nhl_df.team.str.replace('Dallas', 'Dallas–Fort Worth')
    nhl_df['team'] = nhl_df.team.str.replace('Vegas', 'Las Vegas')
    nhl_df['team'] = nhl_df.team.str.replace('Anaheim', 'Los Angeles')    
    nhl_df['team'] = nhl_df.team.str.replace('San Jose', 'San Francisco Bay Area')
    nhl_df['team'] = nhl_df.team.str.replace('Arizona', 'Phoenix')
    nhl_df=nhl_df.rename(columns={"team": "Metropolitan area"})
    nhl_df=nhl_df.set_index('Metropolitan area')
    nhl_df = nhl_df.drop(columns=['year'])
    nhl_df = nhl_df.astype({'W': 'int32', 'L': 'int32'})
    nhl_df = nhl_df.groupby('Metropolitan area').mean()
    win_loss_by_region = nhl_df['W'] / (nhl_df['W'] + nhl_df['L']) 
    win_loss_by_region = win_loss_by_region.to_numpy()
    nhl_df['WLR_NHL'] = win_loss_by_region
    return nhl_df
    
def get_nba_df():
    nba_df=pd.read_csv('assets/nba.csv', usecols=[0,1,2,8])
    nba_df.drop(nba_df[nba_df['year'] != 2018].index, inplace=True)  
    nba_df['team'] = nba_df.team.str.replace('\s+\S+$', '')
    nba_df['team'] = nba_df.team.str.replace('\s+\S+$', '')
    nba_df['team'] = nba_df.team.str.replace('Indiana', 'Indianapolis')
    nba_df['team'] = nba_df.team.str.replace('Miami', 'Miami–Fort Lauderdale')
    nba_df['team'] = nba_df.team.str.replace('Washington', 'Washington, D.C.')    
    nba_df['team'] = nba_df.team.str.replace('New York', 'New York City')
    nba_df['team'] = nba_df.team.str.replace('Brooklyn', 'New York City')
    nba_df['team'] = nba_df.team.str.replace('Golden State', 'San Francisco Bay Area')
    nba_df['team'] = nba_df.team.str.replace('Portland Trail', 'Portland')
    nba_df['team'] = nba_df.team.str.replace('Utah', 'Salt Lake City')
    nba_df['team'] = nba_df.team.str.replace('Minnesota', 'Minneapolis–Saint Paul')
    nba_df['team'] = nba_df.team.str.replace('Dallas', 'Dallas–Fort Worth')
    nba_df=nba_df.rename(columns={"team": "Metropolitan area"})
    nba_df=nba_df.set_index('Metropolitan area')
    nba_df = nba_df.drop(columns=['year'])
    nba_df = nba_df.astype({'W': 'int32', 'L': 'int32'})
    nba_df = nba_df.groupby('Metropolitan area').mean()
    win_loss_by_region = nba_df['W'] / (nba_df['W'] + nba_df['L']) 
    win_loss_by_region = win_loss_by_region.to_numpy()
    nba_df['WLR_NBA'] = win_loss_by_region
    return nba_df
    
def get_nfl_df():
    nfl_df=pd.read_csv('assets/nfl.csv', usecols=[1,11,13,14])
    nfl_df.drop(nfl_df[nfl_df['year'] != 2018].index, inplace=True)  
    nfl_df = nfl_df[~nfl_df["W"].str.contains("FC")]
    nfl_df['team'] = nfl_df.team.str.replace('\s+\S+$', '')
    nfl_df['team'] = nfl_df.team.str.replace('New England', 'Boston')
    nfl_df['team'] = nfl_df.team.str.replace('Miami', 'Miami–Fort Lauderdale')
    nfl_df['team'] = nfl_df.team.str.replace('New York', 'New York City')
    nfl_df['team'] = nfl_df.team.str.replace('Tennessee', 'Nashville')
    nfl_df['team'] = nfl_df.team.str.replace('San Francisco', 'San Francisco Bay Area')
    nfl_df['team'] = nfl_df.team.str.replace('Oakland', 'San Francisco Bay Area')
    nfl_df['team'] = nfl_df.team.str.replace('Dallas', 'Dallas–Fort Worth')
    nfl_df['team'] = nfl_df.team.str.replace('Washington', 'Washington, D.C.')    
    nfl_df['team'] = nfl_df.team.str.replace('Minnesota', 'Minneapolis–Saint Paul')
    nfl_df['team'] = nfl_df.team.str.replace('Carolina', 'Charlotte')
    nfl_df['team'] = nfl_df.team.str.replace('Tampa Bay', 'Tampa Bay Area')
    nfl_df['team'] = nfl_df.team.str.replace('Arizona', 'Phoenix')
    nfl_df=nfl_df.rename(columns={"team": "Metropolitan area"})
    nfl_df=nfl_df.set_index('Metropolitan area')
    nfl_df = nfl_df.drop(columns=['year'])
    nfl_df = nfl_df.astype({'W': 'int32', 'L': 'int32'})
    nfl_df = nfl_df.groupby('Metropolitan area').mean()
    win_loss_by_region = nfl_df['W'] / (nfl_df['W'] + nfl_df['L']) 
    win_loss_by_region = win_loss_by_region.to_numpy()
    nfl_df['WLR_NFL'] = win_loss_by_region
    return nfl_df
    
def sports_team_performance():
    # Get League DFs
    mlb_df=get_mlb_df()
    nhl_df=get_nhl_df()
    nba_df=get_nba_df()
    nfl_df=get_nfl_df()
    
    # Note: p_values is a full dataframe, so df.loc["NFL","NBA"] should be the same as df.loc["NBA","NFL"] and
    # df.loc["NFL","NFL"] should return np.nan
    sports = ['NFL', 'NBA', 'NHL', 'MLB']
    p_values = pd.DataFrame({k:np.nan for k in sports}, index=sports)

    pair_mlb_nhl_df=pd.merge(mlb_df, nhl_df, how='inner', on='Metropolitan area')
    pair_mlb_nba_df=pd.merge(mlb_df, nba_df, how='inner', on='Metropolitan area')
    pair_mlb_nfl_df=pd.merge(mlb_df, nfl_df, how='inner', on='Metropolitan area')
    pair_nhl_nba_df=pd.merge(nhl_df, nba_df, how='inner', on='Metropolitan area')
    pair_nhl_nfl_df=pd.merge(nhl_df, nfl_df, how='inner', on='Metropolitan area')
    pair_nba_nfl_df=pd.merge(nba_df, nfl_df, how='inner', on='Metropolitan area')

    temp_p = stats.ttest_rel(pair_mlb_nhl_df['WLR_MLB'],pair_mlb_nhl_df['WLR_NHL'])
    p_values.loc["MLB", "NHL"] = temp_p[1]
    p_values.loc["NHL", "MLB"] = temp_p[1]
    temp_p = stats.ttest_rel(pair_mlb_nba_df['WLR_MLB'],pair_mlb_nba_df['WLR_NBA'])
    p_values.loc["MLB", "NBA"] = temp_p[1]
    p_values.loc["NBA", "MLB"] = temp_p[1]
    temp_p = stats.ttest_rel(pair_mlb_nfl_df['WLR_MLB'],pair_mlb_nfl_df['WLR_NFL'])
    p_values.loc["MLB", "NFL"] = temp_p[1]
    p_values.loc["NFL", "MLB"] = temp_p[1]
    temp_p = stats.ttest_rel(pair_nhl_nba_df['WLR_NHL'],pair_nhl_nba_df['WLR_NBA'])
    p_values.loc["NHL", "NBA"] = temp_p[1]
    p_values.loc["NBA", "NHL"] = temp_p[1]
    temp_p = stats.ttest_rel(pair_nhl_nfl_df['WLR_NHL'],pair_nhl_nfl_df['WLR_NFL'])
    p_values.loc["NHL", "NFL"] = temp_p[1]
    p_values.loc["NFL", "NHL"] = temp_p[1]
    temp_p = stats.ttest_rel(pair_nba_nfl_df['WLR_NBA'],pair_nba_nfl_df['WLR_NFL'])
    p_values.loc["NBA", "NFL"] = temp_p[1]
    p_values.loc["NFL", "NBA"] = temp_p[1]
    #return p_values
    
    assert abs(p_values.loc["NBA", "NHL"] - 0.02) <= 1e-2, "The NBA-NHL p-value should be around 0.02"
    assert abs(p_values.loc["MLB", "NFL"] - 0.80) <= 1e-2, "The MLB-NFL p-value should be around 0.80"
    return p_values

# -- INVOKE ---
sports_team_performance()    
